#!/bin/bash

# ! This and referenced scripts should be idempotent so bootstrapping can be run multiple times.

# ? Reminder: Any installations that use a script and not apt-get install, should probably run every time to update (i.e. do no wrap in if ! is_command_available)

cd "$HOME" || { echo "Bootstrapping failed: Could not cd into $HOME"; exit 1; }

echo "=============================================================================="
echo " > Setting up helper symbols "
echo "=============================================================================="

HELPERS="$HOME/.config/yadm/helpers.sh"
chmod +x "$HELPERS"
# shellcheck source=$HOME/.config/yadm/helpers.sh
. "${HELPERS}"

echo "=============================================================================="
echo " > Cleaning up old goober "
echo "=============================================================================="

CLEANUP="$HOME/.config/yadm/cleanup.sh"
chmod +x "$CLEANUP"
# shellcheck source=$HOME/.config/yadm/cleanup.sh
. "${CLEANUP}"















if $IS_WINDOWS_GIT_BASH; then
    echo "=============================================================================="
    echo " > Running Windows Bootstrap "
    echo "=============================================================================="

    echo "Running PowerShell bootstrap script"
    if powershell.exe -ExecutionPolicy Bypass -File "$HOME/.config/yadm/bootstrap.ps1"; then
        echo "PowerShell bootstrap completed successfully"
    else
        echo "PowerShell bootstrap failed with exit code $?"
    fi

    echo Setting up ssh-agent auto-launch
    WINDOWS_SSH_AGENT_AUTO_LAUNCH=". $HOME/.config/yadm/windows-ssh-agent-auto-launch.sh"
    is_line_in_file "$WINDOWS_SSH_AGENT_AUTO_LAUNCH" "$BASHRC"
    if ! is_line_in_file "$WINDOWS_SSH_AGENT_AUTO_LAUNCH" "$BASHRC"; then
        printf "\n\n%s\n" "$WINDOWS_SSH_AGENT_AUTO_LAUNCH" >> "$BASHRC"
    fi










elif $IS_LINUX; then
    echo "=============================================================================="
    echo " > Running Linux / WSL Bootstrap "
    echo "=============================================================================="
    
    echo Updating and upgrading
    sudo apt update && sudo apt upgrade
    echo Finished updating and upgrading
    echo Auto-removing unused packages
    sudo apt autoremove
    echo Finished auto-removing unused packages

    # git
    echo Installing latest git version
    sudo apt-get install git

    if ! is_command_available shellcheck || is_command_installed_in_windows shellcheck; then
        echo Installing ShellCheck
        sudo apt install shellcheck
    fi

    # setup, update, and configure nvm + node
    # https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating
    # https://learn.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl
    echo Installing/updating nvm
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash

    # this is called to load nvm right away so that we can install node versions below
    export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

    echo Installing the current Node release
    nvm install node

    echo Setting default Node version to the latest
    # https://github.com/nvm-sh/nvm?tab=readme-ov-file#set-default-node-version
    nvm alias default node

    # cdnvm is a tool that will automatically switch node versions based on the .nvmrc file in the current directory or parent directories at each cd
    CDNVM=". $HOME/.config/yadm/cdnvm.sh"
    is_line_in_file "$CDNVM" "$BASHRC"
    if ! is_line_in_file "$CDNVM" "$BASHRC"; then
        echo Setting up cdnvm
        printf "\n\n%s\n" "$CDNVM" >> "$BASHRC"
        chmod +x "$CDNVM"
    fi
    eval "$CDNVM" # make sure cdnvm is loaded right away

    echo Setting up ssh-agent auto-launch
    LINUX_SSH_AGENT_AUTO_LAUNCH=". $HOME/.config/yadm/linux-ssh-agent-auto-launch.sh"
    is_line_in_file "$LINUX_SSH_AGENT_AUTO_LAUNCH" "$BASHRC"
    if ! is_line_in_file "$LINUX_SSH_AGENT_AUTO_LAUNCH" "$BASHRC"; then
        printf "\n\n%s\n" "$LINUX_SSH_AGENT_AUTO_LAUNCH" >> "$BASHRC"
        chmod +x "$LINUX_SSH_AGENT_AUTO_LAUNCH"
    fi
fi










echo "=============================================================================="
echo " > Running Common Bootstrap " 
echo "=============================================================================="
if $IS_WINDOWS_GIT_BASH || $IS_LINUX; then

    if [[ -d "$HOME/.yadm-project" ]]; then
        echo Updating yadm
        cd "$HOME/.yadm-project" || { echo "Failed to cd into .yadm-project"; exit 1; }
        git pull
        cd "$HOME" || { echo "Failed to cd back to HOME"; exit 1; }
    else
        echo "WARNING: No .yadm-project directory found. Skipping yadm update."
    fi

    echo Setting up .dotfiles updater
    DOTFILES_UPDATER=". $HOME/.config/yadm/dotfiles-updater.sh"
    is_line_in_file "$DOTFILES_UPDATER" "$BASHRC"
    if ! is_line_in_file "$DOTFILES_UPDATER" "$BASHRC"; then
        printf "\n\n%s\n" "$DOTFILES_UPDATER" >> "$BASHRC"
        chmod +x "$DOTFILES_UPDATER"
    fi

fi

















echo "=============================================================================="
echo " > Configuring git "
echo "=============================================================================="
# Instead of using .gitconfig I am setting them from the command line
git config --global user.name "yak";
git config --global user.email "yak@isaacyakl.com";
git config --global init.defaultBranch "main";

if $IS_WINDOWS_GIT_BASH; then
    # https://stackoverflow.com/a/22575737
    # https://gitforwindows.org/git-cannot-create-a-file-or-directory-with-a-long-path.html
    echo "Setting git config --system core.longpaths true REQUIRES administrator privileges"
    git config --system core.longpaths true
    echo "If the previous command was denied, it is not critical. Setting core.longpaths at the --system level is usually not necessary."
    # current user's repos
    git config --global core.longpaths true
fi

# Check if this is WSL
if $IS_WSL; then # https://www.reddit.com/r/bashonubuntuonwindows/comments/12jzdhn/unc_paths_not_supported/
    # compare the contents of /etc/wsl.conf and $HOME/.config/yadm/wsl.conf
    if ! cmp -s /etc/wsl.conf "$HOME/.config/yadm/wsl.conf"; then
        echo "=============================================================================="
        echo " > Applying WSL config "
        echo "=============================================================================="
        echo "Backing up existing wsl.conf to wsl.conf.bak"
        sudo mv /etc/wsl.conf /etc/wsl.conf.bak
        sudo cp "$HOME/.config/yadm/wsl.conf" /etc/wsl.conf
        echo "Applied wsl.conf from .dotfiles "
        echo "Please restart WSL to apply config changes."
    fi
fi

# done
echo "=============================================================================="
echo " > Bootstrapping complete "
echo "=============================================================================="
echo "Reloading shell..."

exec "$BASH"
