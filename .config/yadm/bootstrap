#!/bin/bash

# This entire script should be idempotent so it can be run multiple times.

cd "$HOME" || { echo "Bootstrapping failed: Could not cd into $HOME"; exit 1; }

###############################################################################
# Set up helper symbols
###############################################################################

# Create .bashrc if it doesn't exist
BASHRC=".bashrc"

if [[ ! -f "$BASHRC" ]]; then
  touch "$BASHRC"
  echo "Created: $BASHRC"
fi

function is_line_in_file() {
  local line="$1"
  local file="$2"

  # Check if file exists
  if [[ ! -f "$file" ]]; then
    return 1 # File not found
  fi

  # Check if the line exists in the file
  if grep -Fxq "$line" "$file"; then
    return 0 # Line found
  else
    return 1 # Line not found
  fi
}

system_type=$(uname -s)

################################################################################
# Bootstrap Windows
################################################################################
if [[ "$system_type" = *"MINGW64_NT"* ]]; then
    echo ==============================================================================
    echo Running Windows Bootstrap...
    echo ==============================================================================
    
    echo Setting up ssh-agent auto-launch
    LINE="source ~/.config/yadm/windows-ssh-agent-auto-launch"
    FILE=".bashrc"
    is_line_in_file "$LINE" "$FILE"
    if ! is_line_in_file "$LINE" "$FILE"; then
        printf "\n\n%s\n" "$LINE" >> "$FILE"
    fi

################################################################################
# Bootstrap Linux
################################################################################
elif [ "$system_type" = "Linux" ]; then
    echo ==============================================================================
    echo Running Linux Bootstrap...
    echo ==============================================================================
    
    echo Updating and upgrading...
    sudo apt update && sudo apt upgrade
    echo Finished updating and upgrading
    echo Auto-removing unused packages...
    sudo apt autoremove
    echo Finished auto-removing unused packages

    # git
    echo Installing latest git version
    sudo apt-get install git

    # curl
    if ! type -a curl >&2; then
        echo Installing curl
        sudo apt-get install curl
    fi

    # 7z
    if ! type -a 7z >&2; then
        echo Installing 7z
        sudo apt install p7zip-full p7zip-rar
    fi

    # deno
    if ! type -a deno >&2; then
        echo Installing Deno
        curl -fsSL https://deno.land/install.sh | sh
    fi

    echo Setting up ssh-agent auto-launch
    LINE="source ~/.config/yadm/linux-ssh-agent-auto-launch"
    FILE=".bashrc"
    is_line_in_file "$LINE" "$FILE"
    if ! is_line_in_file "$LINE" "$FILE"; then
        printf "\n\n%s\n" "$LINE" >> "$FILE"
    fi
fi

################################################################################
# Bootstrap common
################################################################################
if [[ "$system_type" = *"MINGW64_NT"* ]] || [[ "$system_type" = "Linux" ]]; then
    # nvm + node
    # https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating
    # https://learn.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl
    echo Installing nvm and Node
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash

    # this is called to load nvm right away so that we can install node versions below
    export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

    echo NVM installed successfully

    echo Installing the current Node release
    nvm install node

    echo Installing Node LTS
    nvm install --lts
    
    echo Setting up nvm use defaults auto-launch
    # if .nvmrc exists, use it else use the LTS version
    LINE="if [ -f .nvmrc ]; then nvm install; else nvm install --lts; fi"
    FILE=".bashrc"
    is_line_in_file "$LINE" "$FILE"
    if ! is_line_in_file "$LINE" "$FILE"; then
        printf "\n\n%s\n" "$LINE" >> "$FILE"
    fi

    # Angular CLI global
    echo Installing Angular CLI globally
    npm install -g @angular/cli

    echo Setting up .dotfiles auto-update check
    LINE="if ! yadm pull | grep -q 'Already up to date.'; then echo '.dotfiles update available'; fi"
    FILE=".bashrc"
    is_line_in_file "$LINE" "$FILE"
    if ! is_line_in_file "$LINE" "$FILE"; then
        printf "\n\n%s\n" "$LINE" >> "$FILE"
    fi
fi

################################################################################
# Configure git
################################################################################

# Instead of using .gitconfig I am conditionally setting git config values
echo Configuring git
git config --global user.name "yak";
git config --global user.email "yak@isaacyakl.com";
git config --global init.defaultBranch "main";

if [[ "$system_type" = *"MINGW64_NT"* ]]; then
    # https://stackoverflow.com/a/22575737
    git config --system core.longpaths true # system wide (not usually necessary) (requires Administrator privileges to set)
    git config --global core.longpaths true # current user's repos
fi

# Check if this is WSL
if [ "$system_type" = "Linux" ] && [[ -f "/etc/wsl.conf" ]]; then # https://www.reddit.com/r/bashonubuntuonwindows/comments/12jzdhn/unc_paths_not_supported/
    echo Applying WSL config
    sudo mv /etc/wsl.conf /etc/wsl.conf.bak
    sudo cp ~/.config/yadm/wsl.conf /etc/wsl.conf
    echo "Please restart WSL to apply config changes."
fi

# done
echo ==============================================================================
echo Bootstrapping complete. Reloading shell...
echo ==============================================================================

exec "$BASH"
